---
description: 
globs: 
alwaysApply: true
---
Run the project in venv and use port 3001

## Documentation & Code Annotation Standards

### File Header Template

Every **JS/TS file** must include a standardized comment header in this format:

```ts
/**
 * ──────────────────────────────────────────────────
 * File: path/to/your/file.ts[x] or .jsx
 * Description: $DESCRIPTION
 * Author: Muhammad Abubakar Khan
 * Created: $CREATED_DATE
 * Last Updated: $CURRENT_DATE
 * ──────────────────────────────────────────────────
 */
```

### Module Documentation

Place a top-level comment block for files that define key modules/components:

```ts
/**
 * Component: UserDashboard
 * 
 * This component is responsible for rendering the main user dashboard.
 * Includes charts, tables, and summaries.
 * 
 * Key Features:
 * - Fetches data from `/api/dashboard`
 * - Uses Material UI components
 * - Responsive layout with Grid system
 * 
 * Example Usage:
 * <UserDashboard userId="12345" />
 */
```

### Component Documentation (React)

```tsx
/**
 * LoginForm Component
 * 
 * Renders a login form using Material UI inputs.
 * 
 * Props:
 * - onSubmit: (data: { email: string; password: string }) => void
 * 
 * Example:
 * <LoginForm onSubmit={handleLogin} />
 */
export const LoginForm = ({ onSubmit }: Props) => { ... }
```

### Property Documentation (for TypeScript classes or objects)

```ts
interface UserProfile {
  /** Unique identifier for the user */
  id: string;

  /** Full name of the user */
  name: string;

  /** Optional profile picture URL */
  avatarUrl?: string;
}
```

### TypeScript Usage Guidelines

* ✅ Use `interface` and `type` to define data shapes
* ✅ All function inputs and outputs must be typed
* ✅ Use `Record`, `Partial`, `Readonly`, etc., when applicable
* ✅ Avoid `any`, use `unknown` + type guards when needed

```ts
type UserRole = 'Global Admin' | 'Tenant Admin';

function getPermissions(role: UserRole): string[] { ... }
```

### Commenting Standards

#### Inline Comments

```ts
// Retry fetching user data on initial failure
await fetchUserData();

// TODO: Add error fallback UI for disconnected state
// NOTE: This is a temporary workaround until backend stabilizes
```

#### Code Section Separators

```ts
// ────────────────────────────────────────
// API Handlers
// ────────────────────────────────────────

// ────────────────────────────────────────
// Utility Functions
// ────────────────────────────────────────

// ────────────────────────────────────────
// Component Logic
// ────────────────────────────────────────
```

### Logging Standards (Node.js Backend)

Use a logger like `winston` or `pino`. Avoid `console.log` in production.

```ts
import logger from '../utils/logger';

logger.info('User created successfully');
logger.error('User creation failed', { userId, error });
```

---

## Security Requirements

### Critical Security Rules

* ❌ **Never commit `.env`, API keys, or secrets**
* ❌ **No hardcoded credentials**
* ✅ **Use `.env.local` for local config, and `.env.production` for deployed**
* ✅ **Validate user input on both frontend and backend**
* ✅ **Escape or sanitize HTML to prevent XSS**


### Code Review Focus Areas

* Authentication logic
* Authorization guards (role checks, access control)
* Input validation
* Open redirects or token leakage
* Console logs or exposed stack traces

---

## Pull Request Process

### Before Creating a PR

1. ✅ Ensure the app builds (`npm run build`)
2. ✅ Run lint (`npm run lint`) and tests (`npm test`)
3. ✅ Remove `console.log`, `debugger`, and test data
4. ✅ Update related documentation or README
5. ✅ Format code using Prettier or ESLint

### PR Template
```md
## What This PR Does
[Short summary]

## Changes Made
- Updated LoginForm to use MUI v6
- Removed deprecated axios usage

## Testing
- `npm run dev` to test locally
- Click "Login" with test credentials

## Security Considerations
- Added input validation
- Restricted access to admin routes
``

---

## Quality Assurance

### Testing Requirements

* Unit tests for all business logic
* Integration tests for API endpoints
* Manual testing of UI changes
* Test mobile responsiveness (for frontend)
* Edge cases: null, undefined, empty states, 404s, etc.

### Documentation

* Update or create README sections
* Comment complex logic or algorithms
* Add inline prop or hook usage descriptions
---

## Prohibited Activities

### Strictly Forbidden

* ❌ Skipping code reviews
* ❌ Merging with broken tests
* ❌ Committing secrets or personal info
* ❌ Installing packages without approval
* ❌ Circumventing security or auth checks

---
## Final Notes

### Professional Standards

* Maintain respectful communication
* Deliver reliable, tested, readable code
* Be responsive to code reviews
* Prioritize security and user experience

---
**Reminder**: Code quality and security are **non-negotiable**. Ask when in doubt. Document what you learn.
---
