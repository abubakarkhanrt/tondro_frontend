---
description: 
globs: 
alwaysApply: true
---
### **2. Pull Request (PR) Process**

#### **Before Creating a PR**

1.  ✅ **Build & Lint:** Ensure the application builds successfully (`npm run build`) and passes all linter checks (`npm run lint`).
2.  ✅ **Testing:** Run all unit and integration tests (`npm test`) and confirm they all pass.
3.  ✅ **Clean Code:** Remove any `console.log`, `debugger` statements, or temporary test data.
4.  ✅ **Documentation:** Update any relevant documentation (e.g., README, component JSDoc) that is impacted by your changes.

#### **Creating the PR**

*   **Clear Title & Description:** Write a concise title and a detailed description of what the PR accomplishes.
*   **Link to Issue:** If the PR addresses a specific issue, link to it.
*   **Testing Steps:** Provide clear, step-by-step instructions for how a reviewer can manually test your changes.
*   **Screenshots/GIFs:** For any UI changes, include visual evidence of the new or updated interface.

---

### **3. Quality Assurance & Testing**

#### **Testing Requirements**
*   **Unit Tests:** All new business logic (utility functions, hooks) must be accompanied by unit tests using **Jest** and **React Testing Library**.
*   **Integration Tests:** API endpoints should have integration tests to verify their behavior.
*   **Manual Testing:** Always manually test your changes in a browser to catch issues not covered by automated tests. Check different screen sizes for responsiveness.
*   **Edge Cases:** Test for edge cases like null/undefined inputs, empty states, and error conditions (e.g., 404s).

#### **Centralized Test ID Management (`testIds.ts`)**

To ensure stable and maintainable end-to-end and integration tests, all `data-testid` attributes **must** be sourced from a single, shared source of truth.

**Workflow:**
1.  **Locate or Create:** The file is located at `src/testIds.ts`.
2.  **Define IDs First:** Before adding a `data-testid` to a component, you **must** first define a corresponding string constant in the `testIds.ts` file. Group IDs logically by component or page.
3.  **Implement in Component:** Import the `TestIds` object and reference the specific ID in your component's `data-testid` prop.

**Example `src/testIds.ts`:**
```ts
/**
 * Central repository for all `data-testid` attributes used in the application.
 * This ensures consistency and makes tests less brittle to UI changes.
 */
export const TestIds = {
    // IDs for the Login Page
    LOGIN_PAGE: {
      emailInput: 'login-email-input',
      passwordInput: 'login-password-input',
      submitButton: 'login-submit-button',
    },

    // IDs for the User Management Table
    USER_TABLE: {
      tableContainer: 'user-table-container',
      addUserButton: 'user-table-add-user-btn',
      // Use functions for dynamic IDs
      rowById: (userId: string | number) => `user-table-row-${userId}`,
    },
};
```

**Example Component Usage:**
```tsx
import { TestIds } from '@/testIds';
import { Button } from '@mui/material';

export const AddUserButton = () => (
  <Button data-testid={TestIds.USER_TABLE.addUserButton}>
    Add User
  </Button>
);
```
---

### **4. Prohibited Activities**

*   ❌ **Committing Secrets:** Never commit `.env` files, API keys, or any other sensitive credentials.
*   ❌ **Skipping Code Reviews:** All code must be reviewed and approved before merging.
*   ❌ **Merging with Broken Tests:** Do not merge a PR if the test suite is failing.
*   ❌ **Installing Unapproved Packages:** Get approval before adding new third-party dependencies to the project.


---
**Reminder**: Code quality and security are **non-negotiable**. Ask when in doubt. Document what you learn.
---
